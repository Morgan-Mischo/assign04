			String[] arrayToSort = new String[1000000];
			int probSize = 1000000;
			for(int i = 0; i < probSize; i++)
			{
				arrayToSort[i] = generateRandom(aToZ);
			}

			for(int i = 100000; i < probSize; i+=100000)
			{
				String[] temp = Arrays.copyOf(arrayToSort, i);
				
				long stopTime, midpointTime, startTime = System.nanoTime();

				// Stabilize timer
				while(System.nanoTime() - startTime < 1000000000) { // empty block
				}

				// Collect running time for normal method
				startTime = System.nanoTime();

				for(int j = 0; i < TIMES_TO_LOOP; i++) 
				{
					AnagramChecker.getLargestAnagramGroup(temp);
				}
				midpointTime = System.nanoTime();

				// Run to capture the "overhead" costs
				for(int j = 0; i < TIMES_TO_LOOP; i++) { 
				}
				stopTime = System.nanoTime();

				// Subtract overhead and get average time
				double averageTime = (double) ((midpointTime - startTime) - (stopTime - midpointTime)) / TIMES_TO_LOOP;

				System.out.print(i + "\n" + averageTime + "\n\n");
